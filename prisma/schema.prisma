// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  stripeId  String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile      Profile?
  subscription Subscription?
  files        File[]
  invoices     Invoice[]
}

model Profile {
  id      String  @id @default(uuid())
  name    String
  company String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}

enum SubscriptionLevel {
  free
  paid
}

enum SubscriptionStatus {
  incomplete
  incomplete_expired
  trialing
  active
  past_due
  paused
  canceled
  unpaid
}

model Subscription {
  id                 String             @id @default(uuid())
  level              SubscriptionLevel
  stripeId           String             @unique
  stripeStatus       SubscriptionStatus
  currentPeriodEnd   DateTime
  currentPeriodStart DateTime
  cancelAtPeriodEnd  Boolean            @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}

enum InvoiceStatus {
  draft
  open
  void
  paid
  uncollectible
}

model Invoice {
  id            String        @id @default(uuid())
  stripeId      String        @unique
  hostedUrl     String?
  pdfUrl        String?
  invoiceNumber String?
  billingReason String?
  status        InvoiceStatus @default(draft)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

enum FileDisableReason {
  lowered_subscription
  failed_payment
}

model File {
  id             String             @id @default(uuid())
  name           String?
  url            String             @unique
  mimeType       String?
  disabled       Boolean            @default(false)
  disabledReason FileDisableReason?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  events FileEvent[] @relation()
  user   User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

enum FileEvents {
  view
  qr_code_view
  url_update
}

model FileEvent {
  id        String     @id @default(uuid())
  event     FileEvents
  meta      String?
  createdAt DateTime   @default(now())

  fileId String
  File   File   @relation(fields: [fileId], references: [id], onDelete: Cascade)
}
