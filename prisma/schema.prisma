// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile         Profile?
  subscription    Subscription?
  files           File[]
  paymentSessions PaymentSession[]
}

model Profile {
  id      String  @id @default(uuid())
  name    String
  company String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}

enum SubscriptionStatus {
  valid
  payment_issue
  cancelled
}

enum SubscriptionLevel {
  free
  paid
}

model Subscription {
  id     String             @id @default(uuid())
  status SubscriptionStatus
  level  SubscriptionLevel

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}

enum PaymentSessionStatus {
  initiated
  successful
  failed
  cancelled
}

model PaymentSession {
  id           String               @id @default(uuid())
  status       PaymentSessionStatus @default(initiated)
  successValue String
  failureValue String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model File {
  id        String   @id @default(uuid())
  name      String?
  url       String   @unique
  mimeType  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  events FileEvent[] @relation()
  user   User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

enum FileEvents {
  view
  qr_code_view
  url_update
}

model FileEvent {
  id        String     @id @default(uuid())
  event     FileEvents
  meta      String?
  createdAt DateTime   @default(now())

  fileId String
  File   File   @relation(fields: [fileId], references: [id], onDelete: Cascade)
}
